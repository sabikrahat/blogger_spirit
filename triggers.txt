
-- insert into post table
-- 1
DELIMITER $$ 
CREATE OR REPLACE TRIGGER check_user_points_while_post
    BEFORE
        INSERT ON app_posts 
    FOR EACH ROW 
    BEGIN
        DECLARE points INT;
        SELECT point INTO points FROM app_users WHERE id = NEW.publisherId;
        IF points < 10 THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'You don''t have enough point to post';
        END IF;
    END $$ 
DELIMITER ;

-- 2
DELIMITER $$ 
CREATE OR REPLACE TRIGGER update_user_point
    AFTER
        INSERT ON app_posts
    FOR EACH ROW BEGIN
        UPDATE app_users SET point = point - 10 WHERE id = NEW.publisherId;
    END $$ 
DELIMITER ;


-- insert into transfer point table
DELIMITER $$ 
CREATE OR REPLACE TRIGGER check_user_points_while_transferring
    BEFORE
        INSERT ON app_transfer_point 
    FOR EACH ROW 
    BEGIN
        DECLARE points INT;
        SELECT point INTO points FROM app_users WHERE email = NEW.senderEmail;
        IF points < NEW.point THEN
            SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'You don''t have enough point to post';
        END IF;
    END $$ 
DELIMITER ;



-- Procedure

CREATE OR REPLACE PROCEDURE getPosts(IN userId BIGINT) 
NOT DETERMINISTIC CONTAINS SQL 
SQL SECURITY DEFINER 
SELECT ap.title, ap.description, ap.img as postImg, ap.created_at as postedAt, au.name, au.email, au.img as userImg
FROM app_posts ap, app_users au 
WHERE ap.publisherId = au.id and ap.publisherId != userId;


CREATE PROCEDURE getPostById(IN postId BIGINT)
NOT DETERMINISTIC CONTAINS SQL
SQL SECURITY DEFINER
SELECT ap.title, ap.description, ap.img as postImg, ap.created_at as postedAt, au.name, au.email, au.img as userImg
FROM app_posts ap, app_users au
WHERE ap.publisherId = au.id and ap.id != postId;


-- Function

-- 1 to get total point sended by user

CREATE OR REPLACE FUNCTION getSendedPoint(userEmail VARCHAR(40))
RETURNS INT NOT DETERMINISTIC CONTAINS SQL
SQL SECURITY DEFINER 
RETURN (
    SELECT SUM(point) as total_sended_point
    FROM app_transfer_point
    WHERE senderEmail = userEmail
);


-- 2 to get total point received by user

CREATE OR REPLACE FUNCTION getReceivedPoint(userEmail VARCHAR(40))
RETURNS INT NOT DETERMINISTIC CONTAINS SQL
SQL SECURITY DEFINER 
RETURN (
    SELECT SUM(point) as total_received_point
    FROM app_transfer_point
    WHERE receiverEmail = userEmail
);